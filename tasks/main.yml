---
- name: Include distribution specific vars
  ansible.builtin.include_vars: "{{ ansible_distribution_release }}.yml"

- name: Install dependencies
  ansible.builtin.apt:
    state: present
    name: [git, make]
    update_cache: true

- name: Checkout repository
  ansible.builtin.git:
    repo: "{{ libretime_checkout_url }}"
    dest: "{{ libretime_checkout_dest }}"
    version: "{{ libretime_checkout_version }}"
    depth: 1
  register: libretime_checkout

- name: Clean checkout # noqa no-handler command-instead-of-module
  ansible.builtin.command: git clean -xdf
  args:
    chdir: "{{ libretime_checkout_dest }}"
  when: libretime_checkout is changed

- name: Build VERSION file
  ansible.builtin.command: make -C {{ libretime_checkout_dest }} VERSION
  args:
    creates: "{{ libretime_checkout_dest }}/VERSION"

- name: Ensure systemd unit directory exists
  ansible.builtin.file:
    path: /usr/lib/systemd/system
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Setup postgresql
  ansible.builtin.import_tasks: postgresql.yml
  when: libretime_postgresql_managed

- name: Setup rabbitmq
  ansible.builtin.import_tasks: rabbitmq.yml
  when: libretime_rabbitmq_managed

- name: Setup icecast
  ansible.builtin.import_tasks: icecast.yml
  when: libretime_icecast_managed

- name: Setup liquidsoap
  ansible.builtin.import_tasks: liquidsoap.yml
  when: libretime_liquidsoap_managed

- name: Setup nginx
  ansible.builtin.import_tasks: nginx.yml

- name: Create user {{ libretime_user }}
  ansible.builtin.user:
    name: "{{ libretime_user }}"
    system: true
    createhome: false
    home: "{{ libretime_home }}"
  when: libretime_user != __default_web_user

- name: Create config directory
  ansible.builtin.file:
    path: "{{ libretime_config_dir }}"
    owner: root
    group: root
    mode: 0755
    state: directory

- name: Deploy configuration file
  ansible.builtin.template:
    src: "{{ libretime_config_template | default('libretime/config.yml.j2') }}"
    dest: "{{ libretime_config_filepath }}"
    owner: "{{ libretime_user }}"
    group: "{{ libretime_user }}"
    mode: 0640
    backup: true
  notify: Restart libretime

- name: Create working directories
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
    recurse: true
  with_items:
    - path: "{{ libretime_home }}"
      owner: "{{ libretime_user }}"
      group: "{{ libretime_user }}"
    - path: "{{ libretime_log_dir }}"
      owner: "{{ libretime_user }}"
      group: "{{ libretime_user }}"
    - path: "{{ libretime_storage_dir }}"
      owner: "{{ libretime_user }}"
      group: "{{ libretime_user }}"

- name: Install python3
  ansible.builtin.apt:
    state: present
    name: [python3, python3-pip, python3-venv]

- name: Create venv
  when: libretime_venv is defined
  ansible.builtin.pip:
    name: [wheel]
    virtualenv: "{{ libretime_venv }}"
    virtualenv_command: python3 -m venv

- name: Setup shared
  ansible.builtin.import_tasks: shared.yml
  when: >
    libretime_analyzer_managed or
    libretime_api_managed or
    libretime_playout_managed or
    libretime_worker_managed

- name: Setup api-client
  ansible.builtin.import_tasks: api_client.yml
  when: >
    libretime_analyzer_managed or
    libretime_api_managed or
    libretime_playout_managed or
    libretime_worker_managed

- name: Setup api
  ansible.builtin.import_tasks: api.yml
  when: libretime_api_managed

- name: Setup worker
  ansible.builtin.import_tasks: worker.yml
  when: libretime_worker_managed

- name: Setup analyzer
  ansible.builtin.import_tasks: analyzer.yml
  when: libretime_analyzer_managed

- name: Setup playout
  ansible.builtin.import_tasks: playout.yml
  when: libretime_playout_managed

- name: Setup legacy
  ansible.builtin.import_tasks: legacy.yml
  when: libretime_legacy_managed

- name: Setup systemd target
  ansible.builtin.import_tasks: _systemd.yml
  vars:
    service_name: libretime.target

- name: Run database migration
  become: true
  become_user: "{{ libretime_user }}"
  ansible.builtin.command: "{{ libretime_venv | default('/usr/local') }}/bin/libretime-api migrate"
  register: migration
  changed_when: >
    "No migrations to apply." not in migration.stdout
  when: libretime_migrate
